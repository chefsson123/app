{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\task\\\\app\\\\src\\\\components\\\\Input.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport DataGrid from \"./DataGrid\";\nimport \"./Input.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [fileResult, setFileResult] = useState([]);\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\n  var today = new Date();\n\n  const sfHandler = e => {\n    setIsFileUploaded(true);\n    console.log(fileResult);\n  };\n  /*             Start Uploading          */\n\n\n  function onStartUpload(event) {\n    var file = event.target.files[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      /* split employees by row  */\n      const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\n      const employeesData = splitEmployees.map(employee => {\n        /* in case of NULL - get current date */\n        return employee.replaceAll('NULL', today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate()).split(\",\");\n      });\n      employeesData.map(workDate => {\n        /*  Format Employee Working Day Start and End to a universal type for different dates.\r\n        Then get the reformatted date */\n        workDate[2] = new Date(workDate[2]).toISOString().substring(0, 10).replaceAll(\"-\", \", \");\n        workDate[3] = new Date(workDate[3]).toISOString().substring(0, 10).replaceAll(\"-\", \", \");\n        return workDate;\n      });\n      /* Store each employee ID, Project working on and summarized work days so far in an object */\n\n      const employeeStats = employeesData.map(data => {\n        return {\n          employeeID: data[0].trim(),\n          projectID: data[1].trim(),\n          daysWorked: Math.round(Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay))\n          /*Create new dates for employee - new Date(2005, 01, 01) */\n\n        };\n      });\n      employeeStats.sort(function (a, b) {\n        return b.daysWorked - a.daysWorked;\n        /* Sort employee by worked days */\n      });\n      var sortedByDays = employeeStats.reduce(function (r, a) {\n        /* Group employees working on the same project in different arrays */\n        r[a.projectID] = r[a.projectID] || [];\n        r[a.projectID].push(a);\n        return r;\n      }, []);\n      employeeStats.sort(function (a, b) {\n        /*Group array by project ID */\n        return b.projectID - a.projectID;\n      });\n      var summarizeDaysWorked = sortedByDays.map(item => {\n        /* Add days worked for the employees with most worked days on this project */\n        return {\n          employeeOne: item[0].employeeID,\n          employeeTwo: item[1].employeeID,\n          daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\n          projectID: item[0].projectID\n        };\n      });\n      summarizeDaysWorked.sort(function (a, b) {\n        /* Sort array to get the project that was most worked on */\n        return b.daysWorkedTogether - a.daysWorkedTogether;\n      });\n      setFileResult(summarizeDaysWorked);\n      console.log(fileResult);\n    };\n\n    reader.readAsText(file);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file-upload\",\n      className: \"custom-file-upload\",\n      children: \"Upload your file here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"fileInput\",\n      onChange: onStartUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), isFileUploaded && /*#__PURE__*/_jsxDEV(DataGrid, {\n      employeeStats: fileResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sfHandler,\n      children: \"dasdsadsa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"4Frkn/zQ9f719ufkpWVDBDgiVdo=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/components/Input.js"],"names":["useState","DataGrid","Input","fileResult","setFileResult","isFileUploaded","setIsFileUploaded","oneDay","today","Date","sfHandler","e","console","log","onStartUpload","event","file","target","files","reader","FileReader","onload","splitEmployees","result","trim","split","employeesData","map","employee","replaceAll","getFullYear","getMonth","getDate","workDate","toISOString","substring","employeeStats","data","employeeID","projectID","daysWorked","Math","round","abs","sort","a","b","sortedByDays","reduce","r","push","summarizeDaysWorked","item","employeeOne","employeeTwo","daysWorkedTogether","readAsText"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport DataGrid from \"./DataGrid\";\r\nimport \"./Input.css\";\r\n\r\n\r\nconst Input = () => {\r\n  const [fileResult, setFileResult] = useState([]);\r\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\r\n\r\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n  var today = new Date()\r\n  const sfHandler = (e) => {\r\n    setIsFileUploaded(true);\r\n    console.log(fileResult);\r\n  };\r\n\r\n  /*             Start Uploading          */\r\n  function onStartUpload(event) {\r\n    var file = event.target.files[0];\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      /* split employees by row  */\r\n          const splitEmployees = e.target.result.trim().split(\"\\r\\n\"); \r\n          const employeesData = splitEmployees.map((employee) => {\r\n             /* in case of NULL - get current date */\r\n               return employee.replaceAll('NULL', today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()).split(\",\"); \r\n      });\r\n\r\nemployeesData.map(workDate => {\r\n  /*  Format Employee Working Day Start and End to a universal type for different dates.\r\n  Then get the reformatted date */\r\n         workDate[2] = new Date(workDate[2]).toISOString().substring(0, 10).replaceAll(\"-\", \", \")  \r\n          workDate[3] = new Date(workDate[3]).toISOString().substring(0, 10).replaceAll(\"-\", \", \")\r\n               return workDate   \r\n}) /* Store each employee ID, Project working on and summarized work days so far in an object */\r\n          const employeeStats = employeesData.map((data) => {    \r\n               return {\r\n                employeeID: data[0].trim(),\r\n                projectID: data[1].trim(),\r\n                daysWorked: Math.round(Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay)) /*Create new dates for employee - new Date(2005, 01, 01) */\r\n              }});\r\n     \r\n          employeeStats.sort(function (a, b) {   \r\n                return b.daysWorked - a.daysWorked;  /* Sort employee by worked days */\r\n    });\r\n\r\n          var sortedByDays = employeeStats.reduce(function (r, a) {  /* Group employees working on the same project in different arrays */\r\n              r[a.projectID] = r[a.projectID] || []\r\n              r[a.projectID].push(a)\r\n        \r\n                return r;\r\n    }, []);\r\n\r\n          employeeStats.sort(function (a, b) {   /*Group array by project ID */\r\n                return b.projectID - a.projectID;\r\n  });\r\n\r\n          var summarizeDaysWorked = sortedByDays.map(item => { /* Add days worked for the employees with most worked days on this project */\r\n                return {\r\n                  employeeOne: item[0].employeeID,\r\n                  employeeTwo: item[1].employeeID,\r\n                  daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\r\n                  projectID: item[0].projectID\r\n      }})\r\n\r\n    summarizeDaysWorked.sort(function (a, b) {        /* Sort array to get the project that was most worked on */\r\n      return b.daysWorkedTogether - a.daysWorkedTogether;\r\n  });\r\n  \r\n  \r\n      setFileResult(summarizeDaysWorked);\r\n      console.log(fileResult)\r\n     \r\n    };\r\n    reader.readAsText(file);\r\n   \r\n  }\r\n\r\n  return (\r\n    <div className=\"input-container\">\r\n      <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\r\n        Upload your file here\r\n      </label>\r\n      <input type=\"file\" id=\"fileInput\" onChange={onStartUpload} />\r\n      {isFileUploaded && <DataGrid employeeStats={fileResult} />}\r\n      <button onClick={sfHandler}>dasdsadsa</button>\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}