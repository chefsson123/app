{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useFileUpload = () => {\n  _s();\n\n  const [fileResult, setFileResult] = useState([]);\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\n  var today = new Date();\n  var file = event.target.files[0];\n  var reader = new FileReader();\n\n  reader.onload = function (e) {\n    /* split employees by row  */\n    const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\n    const employeesData = splitEmployees.map(employee => {\n      /* in case of NULL - get current date */\n      return employee.replaceAll(\"NULL\", today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()).split(\",\");\n    });\n    employeesData.map(workDate => {\n      /*  Format Employee Working Day Start and End to a universal type for different dates.\r\n      Then get the reformatted date */\n      workDate[2] = new Date(workDate[2]).toISOString().substring(0, 10).replaceAll(\"-\", \", \");\n      workDate[3] = new Date(workDate[3]).toISOString().substring(0, 10).replaceAll(\"-\", \", \");\n      return workDate;\n    });\n    /* Store each employee ID, Project working on and summarized work days so far in an object */\n\n    const employeeStats = employeesData.map(data => {\n      return {\n        employeeID: data[0].trim(),\n        projectID: data[1].trim(),\n        daysWorked: Math.round(Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay))\n        /*Create new dates for employee - new Date(2005, 01, 01) */\n\n      };\n    });\n    employeeStats.sort(function (a, b) {\n      return b.daysWorked - a.daysWorked;\n      /* Sort employee by worked days */\n    });\n    var sortedByDays = employeeStats.reduce(function (r, a) {\n      /* Group employees working on the same project in different arrays */\n      r[a.projectID] = r[a.projectID] || [];\n      r[a.projectID].push(a);\n      return r;\n    }, []);\n    employeeStats.sort(function (a, b) {\n      /*Group array by project ID */\n      return b.projectID - a.projectID;\n    });\n    var summarizeDaysWorked = sortedByDays.map(item => {\n      /* Add days worked for the employees with most worked days on this project */\n      return {\n        employeeOne: item[0].employeeID,\n        employeeTwo: item[1].employeeID,\n        daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\n        projectID: item[0].projectID\n      };\n    });\n    summarizeDaysWorked.sort(function (a, b) {\n      /* Sort array to get the project that was most worked on */\n      return b.daysWorkedTogether - a.daysWorkedTogether;\n    });\n\n    for (let i = 0; i < summarizeDaysWorked.length + 1; i++) {\n      /* Leave only most worked on project employees */\n      summarizeDaysWorked.pop();\n    }\n\n    setFileResult(summarizeDaysWorked);\n    JSON.stringify(summarizeDaysWorked);\n    console.log(\"Employee #\" + summarizeDaysWorked[0].employeeOne + \" and Employee #\" + summarizeDaysWorked[0].employeeTwo + \" have worked on project #\" + summarizeDaysWorked[0].projectID + \" for the highest number of days ( \" + summarizeDaysWorked[0].daysWorkedTogether + \" )\");\n  };\n\n  reader.readAsText(file);\n};\n\n_s(useFileUpload, \"L4QHM0TobgxuREU1edCwB07mw64=\");\n\nexport default useFileUpload;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/hooks/use-FileUpload.js"],"names":["useState","useFileUpload","fileResult","setFileResult","oneDay","today","Date","file","event","target","files","reader","FileReader","onload","e","splitEmployees","result","trim","split","employeesData","map","employee","replaceAll","getFullYear","getMonth","getDate","workDate","toISOString","substring","employeeStats","data","employeeID","projectID","daysWorked","Math","round","abs","sort","a","b","sortedByDays","reduce","r","push","summarizeDaysWorked","item","employeeOne","employeeTwo","daysWorkedTogether","i","length","pop","JSON","stringify","console","log","readAsText"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\n\r\n\r\n\r\n\r\nconst useFileUpload  = () => {\r\n\r\n\r\n  const [fileResult, setFileResult] = useState([]);\r\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n  var today = new Date();\r\n\r\n\r\n \r\n      \r\n        var file = event.target.files[0];\r\n        var reader = new FileReader();\r\n        reader.onload = function (e) {\r\n          /* split employees by row  */\r\n          const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\r\n          const employeesData = splitEmployees.map((employee) => {\r\n            /* in case of NULL - get current date */\r\n            return employee\r\n              .replaceAll(\r\n                \"NULL\",\r\n                today.getFullYear() +\r\n                  \"-\" +\r\n                  (today.getMonth() + 1) +\r\n                  \"-\" +\r\n                  today.getDate()\r\n              )\r\n              .split(\",\");\r\n          });\r\n    \r\n          employeesData.map((workDate) => {\r\n            /*  Format Employee Working Day Start and End to a universal type for different dates.\r\n      Then get the reformatted date */\r\n            workDate[2] = new Date(workDate[2])\r\n              .toISOString()\r\n              .substring(0, 10)\r\n              .replaceAll(\"-\", \", \");\r\n            workDate[3] = new Date(workDate[3])\r\n              .toISOString()\r\n              .substring(0, 10)\r\n              .replaceAll(\"-\", \", \");\r\n            return workDate;\r\n          }); /* Store each employee ID, Project working on and summarized work days so far in an object */\r\n          const employeeStats = employeesData.map((data) => {\r\n            return {\r\n              employeeID: data[0].trim(),\r\n              projectID: data[1].trim(),\r\n              daysWorked: Math.round(\r\n                Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay)\r\n              ) /*Create new dates for employee - new Date(2005, 01, 01) */,\r\n            };\r\n          });\r\n    \r\n          employeeStats.sort(function (a, b) {\r\n            return b.daysWorked - a.daysWorked; /* Sort employee by worked days */\r\n          });\r\n    \r\n          var sortedByDays = employeeStats.reduce(function (r, a) {\r\n            /* Group employees working on the same project in different arrays */ r[\r\n              a.projectID\r\n            ] = r[a.projectID] || [];\r\n            r[a.projectID].push(a);\r\n    \r\n            return r;\r\n          }, []);\r\n    \r\n          employeeStats.sort(function (a, b) {\r\n            /*Group array by project ID */ return b.projectID - a.projectID;\r\n          });\r\n    \r\n          var summarizeDaysWorked = sortedByDays.map((item) => {\r\n            /* Add days worked for the employees with most worked days on this project */\r\n            return {\r\n              employeeOne: item[0].employeeID,\r\n              employeeTwo: item[1].employeeID,\r\n              daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\r\n              projectID: item[0].projectID,\r\n            };\r\n          });\r\n    \r\n          summarizeDaysWorked.sort(function (a, b) {\r\n            /* Sort array to get the project that was most worked on */ return (\r\n              b.daysWorkedTogether - a.daysWorkedTogether\r\n            );\r\n          });\r\n    \r\n          for (let i = 0; i < summarizeDaysWorked.length + 1; i++) {\r\n            /* Leave only most worked on project employees */\r\n            summarizeDaysWorked.pop();\r\n          }\r\n    \r\n          setFileResult(summarizeDaysWorked);\r\n        \r\n          JSON.stringify(summarizeDaysWorked);\r\n          console.log(\r\n            \"Employee #\" +\r\n              summarizeDaysWorked[0].employeeOne +\r\n              \" and Employee #\" +\r\n              summarizeDaysWorked[0].employeeTwo +\r\n              \" have worked on project #\" +\r\n              summarizeDaysWorked[0].projectID +\r\n              \" for the highest number of days ( \" +\r\n              summarizeDaysWorked[0].daysWorkedTogether +\r\n              \" )\"\r\n          );\r\n        };\r\n        reader.readAsText(file);\r\n        \r\n      }\r\n     \r\n\r\n\r\nexport default useFileUpload;"]},"metadata":{},"sourceType":"module"}