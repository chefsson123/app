{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\task\\\\app\\\\src\\\\components\\\\Input.js\";\nimport \"./Input.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  function onStartUpload(event) {\n    var today = new Date();\n    var file = event.target.files[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      /* split employees by row  */\n      const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\n      const employeesData = splitEmployees.map(employee => {\n        /* in case of NULL - get current date */\n        return employee.replaceAll(\"NULL\", today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()).split(\",\");\n      });\n      employeesData.map(workDate => {\n        /*  Format Employee Working Day Start and End to a universal type for different dates.\r\n        Then get the reformatted date */\n        workDate[2] = new Date(workDate[2]).toISOString().substring(0, 10).replaceAll(\"-\", \", \");\n        workDate[3] = new Date(workDate[3]).toISOString().substring(0, 10).replaceAll(\"-\", \", \");\n        return workDate;\n      });\n      reader.readAsText(file);\n      console.log(employeesData);\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"label-container\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"custom-file-upload\",\n        children: \"Upload your file here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"fileInput\",\n      onChange: onStartUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/components/Input.js"],"names":["Input","onStartUpload","event","today","Date","file","target","files","reader","FileReader","onload","e","splitEmployees","result","trim","split","employeesData","map","employee","replaceAll","getFullYear","getMonth","getDate","workDate","toISOString","substring","readAsText","console","log"],"mappings":";AACA,OAAO,aAAP;;;AAKA,MAAMA,KAAK,GAAG,MAAM;AAClB,WAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAIC,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAX;AACA,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,UAAUC,CAAV,EAAa;AAC3B;AACA,YAAMC,cAAc,GAAGD,CAAC,CAACL,MAAF,CAASO,MAAT,CAAgBC,IAAhB,GAAuBC,KAAvB,CAA6B,MAA7B,CAAvB;AACA,YAAMC,aAAa,GAAGJ,cAAc,CAACK,GAAf,CAAoBC,QAAD,IAAc;AACrD;AACA,eAAOA,QAAQ,CACZC,UADI,CAEH,MAFG,EAGHhB,KAAK,CAACiB,WAAN,KACE,GADF,IAEGjB,KAAK,CAACkB,QAAN,KAAmB,CAFtB,IAGE,GAHF,GAIElB,KAAK,CAACmB,OAAN,EAPC,EASJP,KATI,CASE,GATF,CAAP;AAWD,OAbqB,CAAtB;AAeAC,MAAAA,aAAa,CAACC,GAAd,CAAmBM,QAAD,IAAc;AAC9B;AACR;AACQA,QAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,IAAInB,IAAJ,CAASmB,QAAQ,CAAC,CAAD,CAAjB,EACXC,WADW,GAEXC,SAFW,CAED,CAFC,EAEE,EAFF,EAGXN,UAHW,CAGA,GAHA,EAGK,IAHL,CAAd;AAIAI,QAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,IAAInB,IAAJ,CAASmB,QAAQ,CAAC,CAAD,CAAjB,EACXC,WADW,GAEXC,SAFW,CAED,CAFC,EAEE,EAFF,EAGXN,UAHW,CAGA,GAHA,EAGK,IAHL,CAAd;AAIA,eAAOI,QAAP;AACD,OAZD;AAgBAf,MAAAA,MAAM,CAACkB,UAAP,CAAkBrB,IAAlB;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAYZ,aAAZ;AAIL,KAvCG;AAwCH;;AAEC,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACE;AAAO,QAAA,OAAO,EAAC,aAAf;AAA6B,QAAA,SAAS,EAAC,oBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,WAAtB;AAAkC,MAAA,QAAQ,EAAEf;AAA5C;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA1DD;;KAAMD,K;AA6DN,eAAeA,KAAf","sourcesContent":["\r\nimport \"./Input.css\";\r\n\r\n\r\n\r\n\r\nconst Input = () => {\r\n  function onStartUpload(event) {\r\n    var today = new Date();\r\n    var file = event.target.files[0];\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      /* split employees by row  */\r\n      const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\r\n      const employeesData = splitEmployees.map((employee) => {\r\n        /* in case of NULL - get current date */\r\n        return employee\r\n          .replaceAll(\r\n            \"NULL\",\r\n            today.getFullYear() +\r\n              \"-\" +\r\n              (today.getMonth() + 1) +\r\n              \"-\" +\r\n              today.getDate()\r\n          )\r\n          .split(\",\");\r\n          \r\n      });\r\n\r\n      employeesData.map((workDate) => {\r\n        /*  Format Employee Working Day Start and End to a universal type for different dates.\r\n  Then get the reformatted date */\r\n        workDate[2] = new Date(workDate[2])\r\n          .toISOString()\r\n          .substring(0, 10)\r\n          .replaceAll(\"-\", \", \");\r\n        workDate[3] = new Date(workDate[3])\r\n          .toISOString()\r\n          .substring(0, 10)\r\n          .replaceAll(\"-\", \", \");\r\n        return workDate;\r\n      });\r\n\r\n      \r\n      \r\n      reader.readAsText(file);\r\n      console.log(employeesData)\r\n      \r\n\r\n \r\n}\r\n}\r\n\r\n  return (\r\n    <div className=\"input-container\">\r\n      <div className=\"label-container\">\r\n        <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\r\n          Upload your file here\r\n        </label>\r\n      </div>\r\n      <input type=\"file\" id=\"fileInput\" onChange={onStartUpload}/>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}