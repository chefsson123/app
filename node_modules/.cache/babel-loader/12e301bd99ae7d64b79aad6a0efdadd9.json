{"ast":null,"code":"const formatDateLogic = () => {\n  /* split employees by row  */\n  const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\n  const employeesData = splitEmployees.map(employee => {\n    /* in case of NULL - get current date */\n    return employee.replaceAll(\"NULL\", today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()).split(\",\");\n  });\n  employeesData.map(workDate => {\n    /*  Format Employee Working Day Start and End to a universal type for different dates.\r\n    Then get the reformatted date */\n    workDate[2] = new Date(workDate[2]).toISOString().substring(0, 10).replaceAll(\"-\", \", \");\n    workDate[3] = new Date(workDate[3]).toISOString().substring(0, 10).replaceAll(\"-\", \", \");\n    return workDate;\n  });\n  /* Store each employee ID, Project working on and summarized work days so far in an object */\n\n  const employeeStats = employeesData.map(data => {\n    return {\n      employeeID: data[0].trim(),\n      projectID: data[1].trim(),\n      daysWorked: Math.round(Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay))\n      /*Create new dates for employee - new Date(2005, 01, 01) */\n\n    };\n  });\n  employeeStats.sort(function (a, b) {\n    return b.daysWorked - a.daysWorked;\n    /* Sort employee by worked days */\n  });\n  var sortedByDays = employeeStats.reduce(function (r, a) {\n    /* Group employees working on the same project in different arrays */\n    r[a.projectID] = r[a.projectID] || [];\n    r[a.projectID].push(a);\n    return r;\n  }, []);\n  employeeStats.sort(function (a, b) {\n    /*Group array by project ID */\n    return b.projectID - a.projectID;\n  });\n  var summarizeDaysWorked = sortedByDays.map(item => {\n    /* Add days worked for the employees with most worked days on this project */\n    return {\n      employeeOne: item[0].employeeID,\n      employeeTwo: item[1].employeeID,\n      daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\n      projectID: item[0].projectID\n    };\n  });\n  summarizeDaysWorked.sort(function (a, b) {\n    /* Sort array to get the project that was most worked on */\n    return b.daysWorkedTogether - a.daysWorkedTogether;\n  });\n\n  for (let i = 0; i < summarizeDaysWorked.length + 1; i++) {\n    /* Leave only most worked on project employees */\n    summarizeDaysWorked.pop();\n  }\n};\n\nexport default formatDateLogic;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/helpers/formatDateLogic.js"],"names":["formatDateLogic","splitEmployees","e","target","result","trim","split","employeesData","map","employee","replaceAll","today","getFullYear","getMonth","getDate","workDate","Date","toISOString","substring","employeeStats","data","employeeID","projectID","daysWorked","Math","round","abs","oneDay","sort","a","b","sortedByDays","reduce","r","push","summarizeDaysWorked","item","employeeOne","employeeTwo","daysWorkedTogether","i","length","pop"],"mappings":"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","sourcesContent":["const formatDateLogic = () => {\r\n\r\n\r\n\r\n\r\n/* split employees by row  */\r\nconst splitEmployees = e.target.result.trim().split(\"\\r\\n\");\r\nconst employeesData = splitEmployees.map((employee) => {\r\n  /* in case of NULL - get current date */\r\n  return employee\r\n    .replaceAll(\r\n      \"NULL\",\r\n      today.getFullYear() +\r\n        \"-\" +\r\n        (today.getMonth() + 1) +\r\n        \"-\" +\r\n        today.getDate()\r\n    )\r\n    .split(\",\");\r\n});\r\n\r\nemployeesData.map((workDate) => {\r\n  /*  Format Employee Working Day Start and End to a universal type for different dates.\r\nThen get the reformatted date */\r\n  workDate[2] = new Date(workDate[2])\r\n    .toISOString()\r\n    .substring(0, 10)\r\n    .replaceAll(\"-\", \", \");\r\n  workDate[3] = new Date(workDate[3])\r\n    .toISOString()\r\n    .substring(0, 10)\r\n    .replaceAll(\"-\", \", \");\r\n  return workDate;\r\n}); /* Store each employee ID, Project working on and summarized work days so far in an object */\r\nconst employeeStats = employeesData.map((data) => {\r\n  return {\r\n    employeeID: data[0].trim(),\r\n    projectID: data[1].trim(),\r\n    daysWorked: Math.round(\r\n      Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay)\r\n    ) /*Create new dates for employee - new Date(2005, 01, 01) */,\r\n  };\r\n});\r\n\r\nemployeeStats.sort(function (a, b) {\r\n  return b.daysWorked - a.daysWorked; /* Sort employee by worked days */\r\n});\r\n\r\nvar sortedByDays = employeeStats.reduce(function (r, a) {\r\n  /* Group employees working on the same project in different arrays */ r[\r\n    a.projectID\r\n  ] = r[a.projectID] || [];\r\n  r[a.projectID].push(a);\r\n\r\n  return r;\r\n}, []);\r\n\r\nemployeeStats.sort(function (a, b) {\r\n  /*Group array by project ID */ return b.projectID - a.projectID;\r\n});\r\n\r\nvar summarizeDaysWorked = sortedByDays.map((item) => {\r\n  /* Add days worked for the employees with most worked days on this project */\r\n  return {\r\n    employeeOne: item[0].employeeID,\r\n    employeeTwo: item[1].employeeID,\r\n    daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\r\n    projectID: item[0].projectID,\r\n  };\r\n});\r\n\r\nsummarizeDaysWorked.sort(function (a, b) {\r\n  /* Sort array to get the project that was most worked on */ return (\r\n    b.daysWorkedTogether - a.daysWorkedTogether\r\n  );\r\n});\r\n\r\nfor (let i = 0; i < summarizeDaysWorked.length + 1; i++) {\r\n  /* Leave only most worked on project employees */\r\n  summarizeDaysWorked.pop();\r\n}\r\n}\r\n\r\nexport default formatDateLogic;"]},"metadata":{},"sourceType":"module"}