{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\task\\\\app\\\\src\\\\components\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport \"./Main.css\";\nimport React, { useState } from \"react\";\nimport Label from \"./Label\";\nimport DataGrid from \"./DataGrid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  /*             Start Uploading          */\n  const [fileResult, setFileResult] = useState();\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\n  var today = new Date();\n\n  function onStartUpload(event) {\n    var file = event.target.files[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      /* split employees by row  */\n      const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\n      const employeesDate = splitEmployees.map(employee => {\n        /* in case of NULL - get current date */\n        return employee.replaceAll(\"NULL\", today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()).split(\",\");\n      });\n\n      const oneDay = 24 * 60 * 60 * 1000,\n            // hours*minutes*seconds*milliseconds\n      setDate = YMD => {\n        let [Y, M, D] = YMD.split(\"-\").map(Number);\n        return new Date(Y, --M, D);\n      };\n      /*group Employees by project id , change date string to JS newDate */\n\n\n      const employees = employeesDate.reduce((r, _ref) => {\n        var _r$ProjectID;\n\n        let [EmployeeID, ProjectID, StartDate, EndDate] = _ref;\n        let startD = setDate(StartDate),\n            endD = EndDate ? setDate(EndDate) : new Date();\n        r[ProjectID] = (_r$ProjectID = r[ProjectID]) !== null && _r$ProjectID !== void 0 ? _r$ProjectID : [];\n        r[ProjectID].push({\n          EmployeeID,\n          startD,\n          endD\n        });\n        return r;\n      }, {});\n      let combination = {};\n\n      for (let proj in employees) for (let i = 0; i < employees[proj].length - 1; i++) for (let j = i + 1; j < employees[proj].length; j++) {\n        let empOne = employees[proj][i];\n        let empTwo = employees[proj][j];\n\n        if (empOne.endD <= empTwo.endD && empOne.endD > empTwo.startD || empTwo.endD <= empOne.endD && empTwo.endD > empOne.startD) {\n          var _combination$key;\n\n          let D1 = empOne.startD > empTwo.startD ? empOne.startD : empTwo.startD,\n              D2 = empOne.endD < empTwo.endD ? empOne.endD : empTwo.endD,\n              days = Math.ceil((D2 - D1) / oneDay),\n              key = `${empOne.EmployeeID}-${empTwo.EmployeeID}`;\n          combination[key] = (_combination$key = combination[key]) !== null && _combination$key !== void 0 ? _combination$key : {\n            empOne: empOne.EmployeeID,\n            empTwo: empTwo.EmployeeID,\n            daysWorkedTogether: 0,\n            details: []\n          };\n          combination[key].details.push({\n            proj: Number(proj),\n            days\n          });\n          combination[key].daysWorkedTogether += days;\n        }\n      }\n\n      let result = Object.entries(combination).sort((a, b) => b[1].daysWorkedTogether - a[1].daysWorkedTogether).map(_ref2 => {\n        let [k, v] = _ref2;\n        return v;\n      });\n      result.length = 1;\n      setFileResult(result);\n      console.log(JSON.stringify(result).replaceAll('\"', \"\"));\n    };\n\n    reader.readAsText(file);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(Label, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"fileInput\",\n      onChange: onStartUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), fileResult && /*#__PURE__*/_jsxDEV(DataGrid, {\n      data: fileResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"yyEnCAUpBtrUvsLV5EW+vikkSIE=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/components/Main.js"],"names":["React","useState","Label","DataGrid","Main","fileResult","setFileResult","isFileUploaded","setIsFileUploaded","today","Date","onStartUpload","event","file","target","files","reader","FileReader","onload","e","splitEmployees","result","trim","split","employeesDate","map","employee","replaceAll","getFullYear","getMonth","getDate","oneDay","setDate","YMD","Y","M","D","Number","employees","reduce","r","EmployeeID","ProjectID","StartDate","EndDate","startD","endD","push","combination","proj","i","length","j","empOne","empTwo","D1","D2","days","Math","ceil","key","daysWorkedTogether","details","Object","entries","sort","a","b","k","v","console","log","JSON","stringify","readAsText"],"mappings":"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","sourcesContent":["import \"./Main.css\";\r\nimport React, { useState } from \"react\";\r\nimport Label from \"./Label\";\r\nimport DataGrid from \"./DataGrid\";\r\n\r\nconst Main = () => {\r\n  /*             Start Uploading          */\r\n  const [fileResult, setFileResult] = useState();\r\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\r\n\r\n  var today = new Date();\r\n\r\n  function onStartUpload(event) {\r\n    var file = event.target.files[0];\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      /* split employees by row  */\r\n      const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\r\n      const employeesDate = splitEmployees.map((employee) => {\r\n        /* in case of NULL - get current date */\r\n        return employee\r\n          .replaceAll(\r\n            \"NULL\",\r\n            today.getFullYear() +\r\n              \"-\" +\r\n              (today.getMonth() + 1) +\r\n              \"-\" +\r\n              today.getDate()\r\n          )\r\n          .split(\",\");\r\n      });\r\n\r\n      const oneDay = 24 * 60 * 60 * 1000, // hours*minutes*seconds*milliseconds\r\n        setDate = (YMD) => {\r\n          let [Y, M, D] = YMD.split(\"-\").map(Number);\r\n          return new Date(Y, --M, D);\r\n        };\r\n\r\n      /*group Employees by project id , change date string to JS newDate */\r\n\r\n      const employees = employeesDate.reduce(\r\n        (r, [EmployeeID, ProjectID, StartDate, EndDate]) => {\r\n          let startD = setDate(StartDate),\r\n            endD = EndDate ? setDate(EndDate) : new Date();\r\n          r[ProjectID] = r[ProjectID] ?? [];\r\n          r[ProjectID].push({ EmployeeID, startD, endD });\r\n          return r;\r\n        },\r\n        {}\r\n      );\r\n     \r\n\r\n      let combination = {};\r\n      for (let proj in employees)\r\n        for (let i = 0; i < employees[proj].length - 1; i++)\r\n          for (let j = i + 1; j < employees[proj].length; j++) {\r\n            let empOne = employees[proj][i];\r\n            let empTwo = employees[proj][j];\r\n\r\n            if (\r\n              (empOne.endD <= empTwo.endD && empOne.endD > empTwo.startD) ||\r\n              (empTwo.endD <= empOne.endD && empTwo.endD > empOne.startD)\r\n            ) {\r\n              let D1 =\r\n                  empOne.startD > empTwo.startD ? empOne.startD : empTwo.startD,\r\n                D2 = empOne.endD < empTwo.endD ? empOne.endD : empTwo.endD,\r\n                days = Math.ceil((D2 - D1) / oneDay),\r\n                key = `${empOne.EmployeeID}-${empTwo.EmployeeID}`;\r\n              combination[key] = combination[key] ?? {\r\n                empOne: empOne.EmployeeID,\r\n                empTwo: empTwo.EmployeeID,\r\n                daysWorkedTogether: 0,\r\n                details: [],\r\n              };\r\n              combination[key].details.push({ proj: Number(proj), days });\r\n              combination[key].daysWorkedTogether += days;\r\n            }\r\n          }\r\n\r\n      let result = Object.entries(combination)\r\n        .sort((a, b) => b[1].daysWorkedTogether - a[1].daysWorkedTogether)\r\n        .map(([k, v]) => v);\r\n      result.length = 1;\r\n      setFileResult(result);\r\n\r\n      console.log(JSON.stringify(result).replaceAll('\"', \"\"));\r\n    };\r\n\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <Label />\r\n      <input type=\"file\" id=\"fileInput\" onChange={onStartUpload} />\r\n      {fileResult && <DataGrid data={fileResult} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}