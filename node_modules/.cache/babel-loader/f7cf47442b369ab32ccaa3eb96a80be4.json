{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\task\\\\app\\\\src\\\\components\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport \"./Main.css\";\nimport React, { useState } from \"react\";\nimport Label from \"./Label\";\nimport DataGrid from \"./DataGrid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  /*             Start Uploading          */\n  const [fileResult, setFileResult] = useState();\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\n  var today = new Date();\n\n  function onStartUpload(event) {\n    var file = event.target.files[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      /* split employees by row  */\n      const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\n      const employeesDate = splitEmployees.map(employee => {\n        /* in case of NULL - get current date */\n        return employee.replaceAll(\"NULL\", today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()).split(\",\");\n      });\n\n      const oneDay = 24 * 60 * 60 * 1000 // hours*minutes*seconds*milliseconds\n      ,\n            setDate = YMD => {\n        let [Y, M, D] = YMD.split('-').map(Number);\n        return new Date(Y, --M, D);\n      }; // group Employees by project id , change date string to JS newDate\n\n\n      const employeesStats = employeesDate.reduce((r, _ref) => {\n        var _r$ProjectID;\n\n        let [EmployeeID, ProjectID, StartDate, EndDate] = _ref;\n        let empStartDate = setDate(StartDate),\n            empEndDate = EndDate ? setDate(EndDate) : new Date();\n        r[ProjectID] = (_r$ProjectID = r[ProjectID]) !== null && _r$ProjectID !== void 0 ? _r$ProjectID : [];\n        r[ProjectID].push({\n          EmployeeID,\n          empStartDate,\n          empEndDate\n        });\n        return r;\n      }, {}); // combination of pairs of employees per project \n\n      let combination = {};\n\n      for (let proj in employeesStats) for (let i = 0; i < employeesStats[proj].length - 1; i++) for (let j = i + 1; j < employeesStats[proj].length; j++) {\n        let empOne = employeesStats[proj][i];\n        let empTwo = employeesStats[proj][j];\n\n        if (empOne.enD <= empTwo.enD && empOne.enD > empTwo.empStartDate || empTwo.enD <= empOne.enD && empTwo.enD > empOne.empStartDate) {\n          var _combination$key;\n\n          let D1 = empOne.empStartDate > empTwo.empStartDate ? empOne.empStartDate : empTwo.empStartDate,\n              D2 = empOne.empEndDate < empTwo.empEndDate ? empOne.empEndDate : empTwo.empEndDate,\n              days = Math.ceil((D2 - D1) / oneDay),\n              key = `${empOne.EmployeeID}-${empOne.EmployeeID}`;\n          combination[key] = (_combination$key = combination[key]) !== null && _combination$key !== void 0 ? _combination$key : {\n            empOne: empOne.EmployeeID,\n            emB: emB.EmployeeID,\n            sum: 0,\n            details: []\n          };\n          combination[key].details.push({\n            proj: Number(proj),\n            days\n          });\n          combination[key].sum += days;\n        }\n      }\n\n      let Result = Object.entries(combination).sort((a, b) => b[1].sum - a[1].sum).map(_ref2 => {\n        let [k, v] = _ref2;\n        return v;\n      });\n      console.log(Result);\n      setFileResult(Result);\n      /*\r\n      Result.forEach(el => console.log( JSON.stringify(el).replaceAll('\"','')))\r\n      */\n    };\n\n    reader.readAsText(file);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(Label, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"fileInput\",\n      onChange: onStartUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), fileResult && /*#__PURE__*/_jsxDEV(DataGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"yyEnCAUpBtrUvsLV5EW+vikkSIE=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/components/Main.js"],"names":["React","useState","Label","DataGrid","Main","fileResult","setFileResult","isFileUploaded","setIsFileUploaded","today","Date","onStartUpload","event","file","target","files","reader","FileReader","onload","e","splitEmployees","result","trim","split","employeesDate","map","employee","replaceAll","getFullYear","getMonth","getDate","oneDay","setDate","YMD","Y","M","D","Number","employeesStats","reduce","r","EmployeeID","ProjectID","StartDate","EndDate","empStartDate","empEndDate","push","combination","proj","i","length","j","empOne","empTwo","enD","D1","D2","days","Math","ceil","key","emB","sum","details","Result","Object","entries","sort","a","b","k","v","console","log","readAsText"],"mappings":"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","sourcesContent":["import \"./Main.css\";\r\nimport React, { useState } from \"react\";\r\nimport Label from \"./Label\";\r\nimport DataGrid from \"./DataGrid\";\r\n\r\nconst Main = () => {\r\n\r\n\r\n  /*             Start Uploading          */\r\n  const [fileResult, setFileResult] = useState();\r\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\r\n\r\n  var today = new Date();\r\n\r\n  function onStartUpload(event) {\r\n    var file = event.target.files[0];\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      /* split employees by row  */\r\n      const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\r\n      const employeesDate = splitEmployees.map((employee) => {\r\n        /* in case of NULL - get current date */\r\n        return employee\r\n          .replaceAll(\r\n            \"NULL\",\r\n            today.getFullYear() +\r\n              \"-\" +\r\n              (today.getMonth() + 1) +\r\n              \"-\" +\r\n              today.getDate()\r\n          )\r\n          .split(\",\");\r\n      });\r\n\r\n      const\r\n  oneDay  = 24 * 60 * 60 * 1000 // hours*minutes*seconds*milliseconds\r\n, setDate = YMD =>\r\n    {\r\n    let [Y,M,D] = YMD.split('-').map(Number)\r\n    return new Date(Y,--M,D)\r\n    }\r\n\r\n// group Employees by project id , change date string to JS newDate\r\n\r\nconst employeesStats = employeesDate.reduce( (r,[EmployeeID, ProjectID, StartDate, EndDate])=>\r\n  {\r\n  let empStartDate = setDate(StartDate)\r\n    , empEndDate = EndDate ? setDate(EndDate) :  new Date()\r\n  r[ProjectID] = r[ProjectID] ?? []\r\n  r[ProjectID].push({EmployeeID,empStartDate,empEndDate})\r\n  return r\r\n  }, {})\r\n// combination of pairs of employees per project \r\n\r\nlet combination = {}\r\nfor (let proj in employeesStats) \r\nfor (let i = 0; i < employeesStats[proj].length - 1; i++) \r\nfor (let j = i + 1; j < employeesStats[proj].length; j++) \r\n  {\r\n  let empOne = employeesStats[proj][i]\r\n  let empTwo = employeesStats[proj][j]\r\n\r\n  if (( empOne.enD <= empTwo.enD && empOne.enD > empTwo.empStartDate )\r\n    ||( empTwo.enD <= empOne.enD && empTwo.enD > empOne.empStartDate )\r\n    ){\r\n    let \r\n      D1   = empOne.empStartDate > empTwo.empStartDate ? empOne.empStartDate : empTwo.empStartDate\r\n    , D2   = empOne.empEndDate < empTwo.empEndDate ? empOne.empEndDate : empTwo.empEndDate\r\n    , days = Math.ceil((D2 - D1) / oneDay)\r\n    , key  = `${empOne.EmployeeID}-${empOne.EmployeeID}`\r\n      ;\r\n    combination[key] = combination[key] ?? { empOne: empOne.EmployeeID, emB: emB.EmployeeID, sum:0, details:[] }\r\n    combination[key].details.push({proj: Number(proj), days })\r\n    combination[key].sum += days\r\n    }\r\n  } \r\n \r\nlet Result  =  \r\n  Object.entries(combination)\r\n  .sort((a,b)=> b[1].sum - a[1].sum )\r\n  .map(([k,v])=>v)\r\n  console.log(Result)\r\n  setFileResult(Result)\r\n/*\r\nResult.forEach(el => console.log( JSON.stringify(el).replaceAll('\"','')))\r\n*/\r\n      \r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <Label />\r\n      <input type=\"file\" id=\"fileInput\" onChange={onStartUpload}/>\r\n      {fileResult && <DataGrid />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}