{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\task\\\\app\\\\src\\\\components\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport \"./Main.css\";\nimport React, { useState } from \"react\";\nimport Label from \"./Label\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  /*             Start Uploading          */\n  const [fileResult, setFileResult] = useState([]);\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\n  var today = new Date();\n\n  function onStartUpload(event) {\n    var file = event.target.files[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      /* split employees by row  */\n      const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\n      const employeesData = splitEmployees.map(employee => {\n        /* in case of NULL - get current date */\n        return employee.replaceAll(\"NULL\", today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()).split(\",\");\n      });\n      reader.readAsText(file);\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(Label, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"fileInput\",\n      onChange: onStartUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"4Frkn/zQ9f719ufkpWVDBDgiVdo=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/components/Main.js"],"names":["React","useState","Label","Main","fileResult","setFileResult","isFileUploaded","setIsFileUploaded","oneDay","today","Date","onStartUpload","event","file","target","files","reader","FileReader","onload","e","splitEmployees","result","trim","split","employeesData","map","employee","replaceAll","getFullYear","getMonth","getDate","readAsText"],"mappings":";;;AAAA,OAAO,YAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD;AACA,QAAMO,MAAM,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAA9B,CAJiB,CAImB;;AACpC,MAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,WAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAIC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAX;AACA,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,UAAUC,CAAV,EAAa;AAC3B;AACA,YAAMC,cAAc,GAAGD,CAAC,CAACL,MAAF,CAASO,MAAT,CAAgBC,IAAhB,GAAuBC,KAAvB,CAA6B,MAA7B,CAAvB;AACA,YAAMC,aAAa,GAAGJ,cAAc,CAACK,GAAf,CAAoBC,QAAD,IAAc;AACrD;AACA,eAAOA,QAAQ,CACZC,UADI,CAEH,MAFG,EAGHlB,KAAK,CAACmB,WAAN,KACE,GADF,IAEGnB,KAAK,CAACoB,QAAN,KAAmB,CAFtB,IAGE,GAHF,GAIEpB,KAAK,CAACqB,OAAN,EAPC,EASJP,KATI,CASE,GATF,CAAP;AAUD,OAZqB,CAAtB;AAcAP,MAAAA,MAAM,CAACe,UAAP,CAAkBlB,IAAlB;AACD,KAlBD;AAmBD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,WAAtB;AAAkC,MAAA,QAAQ,EAAEF;AAA5C;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CArCD;;GAAMR,I;;KAAAA,I;AAuCN,eAAeA,IAAf","sourcesContent":["import \"./Main.css\";\r\nimport React, { useState } from \"react\";\r\nimport Label from \"./Label\";\r\n\r\nconst Main = () => {\r\n  /*             Start Uploading          */\r\n  const [fileResult, setFileResult] = useState([]);\r\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\r\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n  var today = new Date();\r\n\r\n  function onStartUpload(event) {\r\n    var file = event.target.files[0];\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      /* split employees by row  */\r\n      const splitEmployees = e.target.result.trim().split(\"\\r\\n\");\r\n      const employeesData = splitEmployees.map((employee) => {\r\n        /* in case of NULL - get current date */\r\n        return employee\r\n          .replaceAll(\r\n            \"NULL\",\r\n            today.getFullYear() +\r\n              \"-\" +\r\n              (today.getMonth() + 1) +\r\n              \"-\" +\r\n              today.getDate()\r\n          )\r\n          .split(\",\");\r\n      });\r\n\r\n      reader.readAsText(file);\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <Label />\r\n      <input type=\"file\" id=\"fileInput\" onChange={onStartUpload}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}