{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\task\\\\app\\\\src\\\\components\\\\DataGrid.js\";\nimport \"./DataGrid.css\";\nimport FinalData from \"./FinalData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DataGrid = props => {\n  const employeesData = `{props.loadedFile}`.map(employee => {\n    return employee.replaceAll(\"NULL\", today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()).split(\",\");\n  });\n  /*\r\n  \r\n  const employeesData = splitEmployees.map((employee) => {\r\n   \r\n    return employee\r\n      .replaceAll(\r\n        \"NULL\",\r\n        today.getFullYear() +\r\n          \"-\" +\r\n          (today.getMonth() + 1) +\r\n          \"-\" +\r\n          today.getDate()\r\n      )\r\n      .split(\",\");\r\n  });\r\n    employeesData.map((workDate) => {\r\n   \r\n    workDate[2] = new Date(workDate[2])\r\n      .toISOString()\r\n      .substring(0, 10)\r\n      .replaceAll(\"-\", \", \");\r\n    workDate[3] = new Date(workDate[3])\r\n      .toISOString()\r\n      .substring(0, 10)\r\n      .replaceAll(\"-\", \", \");\r\n    return workDate;\r\n  }); \r\n  const employeeStats = employeesData.map((data) => {\r\n    return {\r\n      employeeID: data[0].trim(),\r\n      projectID: data[1].trim(),\r\n      daysWorked: Math.round(\r\n        Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay)\r\n      ) \r\n    };\r\n  });\r\n    employeeStats.sort(function (a, b) {\r\n    return b.daysWorked - a.daysWorked; \r\n  });\r\n    var sortedByDays = employeeStats.reduce(function (r, a) {\r\n   r[\r\n      a.projectID\r\n    ] = r[a.projectID] || [];\r\n    r[a.projectID].push(a);\r\n      return r;\r\n  }, []);\r\n    employeeStats.sort(function (a, b) {\r\n    return b.projectID - a.projectID;\r\n  });\r\n    var summarizeDaysWorked = sortedByDays.map((item) => {\r\n      return {\r\n      employeeOne: item[0].employeeID,\r\n      employeeTwo: item[1].employeeID,\r\n      daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\r\n      projectID: item[0].projectID,\r\n    };\r\n  });\r\n    summarizeDaysWorked.sort(function (a, b) {\r\n  return (\r\n      b.daysWorkedTogether - a.daysWorkedTogether\r\n    );\r\n  });\r\n    for (let i = 0; i < summarizeDaysWorked.length + 1; i++) {\r\n   \r\n    summarizeDaysWorked.pop();\r\n  }\r\n    setFileResult(summarizeDaysWorked);\r\n  setIsFileUploaded(true);\r\n  \n  JSON.stringify(summarizeDaysWorked);\r\n  console.log(\r\n    \"Employee #\" +\r\n      summarizeDaysWorked[0].employeeOne +\r\n      \" and Employee #\" +\r\n      summarizeDaysWorked[0].employeeTwo +\r\n      \" have worked on project #\" +\r\n      summarizeDaysWorked[0].projectID +\r\n      \" for the highest number of days ( \" +\r\n      summarizeDaysWorked[0].daysWorkedTogether +\r\n      \" )\"\r\n  );\r\n  console.log(summarizeDaysWorked)\r\n  };\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"datagrid-container\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee ID #1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee ID #2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Project ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Days worked\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FinalData, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_c = DataGrid;\nexport default DataGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataGrid\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/components/DataGrid.js"],"names":["FinalData","DataGrid","props","employeesData","map","employee","replaceAll","today","getFullYear","getMonth","getDate","split"],"mappings":";AAAA,OAAO,gBAAP;AACA,OAAOA,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAG5B,QAAMC,aAAa,GAAI,oBAAD,CAAqBC,GAArB,CAA0BC,QAAD,IAAc;AAE3D,WAAOA,QAAQ,CACZC,UADI,CAEH,MAFG,EAGHC,KAAK,CAACC,WAAN,KACE,GADF,IAEGD,KAAK,CAACE,QAAN,KAAmB,CAFtB,IAGE,GAHF,GAIEF,KAAK,CAACG,OAAN,EAPC,EASJC,KATI,CASE,GATF,CAAP;AAUD,GAZqB,CAAtB;AAiBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYE,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,2BAEE;AAAA,6BACE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CApID;;KAAMV,Q;AAsIN,eAAeA,QAAf","sourcesContent":["import \"./DataGrid.css\";\r\nimport FinalData from \"./FinalData\";\r\n\r\nconst DataGrid = (props) => {\r\n\r\n\r\nconst employeesData = `{props.loadedFile}`.map((employee) => {\r\n   \r\n  return employee\r\n    .replaceAll(\r\n      \"NULL\",\r\n      today.getFullYear() +\r\n        \"-\" +\r\n        (today.getMonth() + 1) +\r\n        \"-\" +\r\n        today.getDate()\r\n    )\r\n    .split(\",\");\r\n});\r\n\r\n\r\n\r\n\r\n  /*\r\n\r\n\r\n  const employeesData = splitEmployees.map((employee) => {\r\n   \r\n    return employee\r\n      .replaceAll(\r\n        \"NULL\",\r\n        today.getFullYear() +\r\n          \"-\" +\r\n          (today.getMonth() + 1) +\r\n          \"-\" +\r\n          today.getDate()\r\n      )\r\n      .split(\",\");\r\n  });\r\n\r\n  employeesData.map((workDate) => {\r\n   \r\n    workDate[2] = new Date(workDate[2])\r\n      .toISOString()\r\n      .substring(0, 10)\r\n      .replaceAll(\"-\", \", \");\r\n    workDate[3] = new Date(workDate[3])\r\n      .toISOString()\r\n      .substring(0, 10)\r\n      .replaceAll(\"-\", \", \");\r\n    return workDate;\r\n  }); \r\n  const employeeStats = employeesData.map((data) => {\r\n    return {\r\n      employeeID: data[0].trim(),\r\n      projectID: data[1].trim(),\r\n      daysWorked: Math.round(\r\n        Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay)\r\n      ) \r\n    };\r\n  });\r\n\r\n  employeeStats.sort(function (a, b) {\r\n    return b.daysWorked - a.daysWorked; \r\n  });\r\n\r\n  var sortedByDays = employeeStats.reduce(function (r, a) {\r\n   r[\r\n      a.projectID\r\n    ] = r[a.projectID] || [];\r\n    r[a.projectID].push(a);\r\n\r\n    return r;\r\n  }, []);\r\n\r\n  employeeStats.sort(function (a, b) {\r\n    return b.projectID - a.projectID;\r\n  });\r\n\r\n  var summarizeDaysWorked = sortedByDays.map((item) => {\r\n\r\n    return {\r\n      employeeOne: item[0].employeeID,\r\n      employeeTwo: item[1].employeeID,\r\n      daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\r\n      projectID: item[0].projectID,\r\n    };\r\n  });\r\n\r\n  summarizeDaysWorked.sort(function (a, b) {\r\n return (\r\n      b.daysWorkedTogether - a.daysWorkedTogether\r\n    );\r\n  });\r\n\r\n  for (let i = 0; i < summarizeDaysWorked.length + 1; i++) {\r\n   \r\n    summarizeDaysWorked.pop();\r\n  }\r\n\r\n  setFileResult(summarizeDaysWorked);\r\n  setIsFileUploaded(true);\r\n \r\n  JSON.stringify(summarizeDaysWorked);\r\n  console.log(\r\n    \"Employee #\" +\r\n      summarizeDaysWorked[0].employeeOne +\r\n      \" and Employee #\" +\r\n      summarizeDaysWorked[0].employeeTwo +\r\n      \" have worked on project #\" +\r\n      summarizeDaysWorked[0].projectID +\r\n      \" for the highest number of days ( \" +\r\n      summarizeDaysWorked[0].daysWorkedTogether +\r\n      \" )\"\r\n  );\r\n  console.log(summarizeDaysWorked)\r\n};\r\n */\r\n  return (\r\n    <div className=\"datagrid-container\">\r\n      \r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th>Employee ID #1</th>\r\n            <th>Employee ID #2</th>\r\n            <th>Project ID</th>\r\n            <th>Days worked</th>\r\n          </tr>\r\n          <FinalData />\r\n          \r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataGrid;\r\n"]},"metadata":{},"sourceType":"module"}