{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\task\\\\app\\\\src\\\\components\\\\Input.js\";\nimport DataGrid from \"./DataGrid\";\nimport \"./Input.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  const employeeStats = `{props.wtf}`.map(data => {\n    return {\n      employeeID: data[0].trim(),\n      projectID: data[1].trim(),\n      daysWorked: Math.round(Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay))\n      /*Create new dates for employee - new Date(2005, 01, 01) */\n\n    };\n  });\n  employeeStats.sort(function (a, b) {\n    return b.daysWorked - a.daysWorked;\n    /* Sort employee by worked days */\n  });\n  var sortedByDays = employeeStats.reduce(function (r, a) {\n    /* Group employees working on the same project in different arrays */\n    r[a.projectID] = r[a.projectID] || [];\n    r[a.projectID].push(a);\n    return r;\n  }, []);\n  employeeStats.sort(function (a, b) {\n    /*Group array by project ID */\n    return b.projectID - a.projectID;\n  });\n  var summarizeDaysWorked = sortedByDays.map(item => {\n    /* Add days worked for the employees with most worked days on this project */\n    return {\n      employeeOne: item[0].employeeID,\n      employeeTwo: item[1].employeeID,\n      daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\n      projectID: item[0].projectID\n    };\n  });\n  summarizeDaysWorked.sort(function (a, b) {\n    /* Sort array to get the project that was most worked on */\n    return b.daysWorkedTogether - a.daysWorkedTogether;\n  });\n\n  for (let i = 0; i < summarizeDaysWorked.length + 1; i++) {\n    /* Leave only most worked on project employees */\n    summarizeDaysWorked.pop();\n  }\n\n  setFileResult(summarizeDaysWorked);\n  setIsFileUploaded(true);\n  JSON.stringify(summarizeDaysWorked);\n  console.log(\"Employee #\" + summarizeDaysWorked[0].employeeOne + \" and Employee #\" + summarizeDaysWorked[0].employeeTwo + \" have worked on project #\" + summarizeDaysWorked[0].projectID + \" for the highest number of days ( \" + summarizeDaysWorked[0].daysWorkedTogether + \" )\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"label-container\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"custom-file-upload\",\n        children: \"Upload your file here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"fileInput\",\n      onChange: onStartUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), isFileUploaded && /*#__PURE__*/_jsxDEV(DataGrid, {\n      loadedFile: fileResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/components/Input.js"],"names":["DataGrid","useState","Input","employeeStats","map","data","employeeID","trim","projectID","daysWorked","Math","round","abs","Date","oneDay","sort","a","b","sortedByDays","reduce","r","push","summarizeDaysWorked","item","employeeOne","employeeTwo","daysWorkedTogether","i","length","pop","setFileResult","setIsFileUploaded","JSON","stringify","console","log","onStartUpload","isFileUploaded","fileResult"],"mappings":"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","sourcesContent":["\r\nimport DataGrid from \"./DataGrid\";\r\nimport \"./Input.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst Input = () => {\r\n  const employeeStats = `{props.wtf}`.map((data) => {\r\n    return {\r\n      employeeID: data[0].trim(),\r\n      projectID: data[1].trim(),\r\n      daysWorked: Math.round(\r\n        Math.abs((new Date(data[2]) - new Date(data[3])) / oneDay)\r\n      ) /*Create new dates for employee - new Date(2005, 01, 01) */,\r\n    };\r\n  });\r\n\r\n  employeeStats.sort(function (a, b) {\r\n    return b.daysWorked - a.daysWorked; /* Sort employee by worked days */\r\n  });\r\n\r\n  var sortedByDays = employeeStats.reduce(function (r, a) {\r\n    /* Group employees working on the same project in different arrays */ r[\r\n      a.projectID\r\n    ] = r[a.projectID] || [];\r\n    r[a.projectID].push(a);\r\n\r\n    return r;\r\n  }, []);\r\n\r\n  employeeStats.sort(function (a, b) {\r\n    /*Group array by project ID */ return b.projectID - a.projectID;\r\n  });\r\n\r\n  var summarizeDaysWorked = sortedByDays.map((item) => {\r\n    /* Add days worked for the employees with most worked days on this project */\r\n    return {\r\n      employeeOne: item[0].employeeID,\r\n      employeeTwo: item[1].employeeID,\r\n      daysWorkedTogether: item[0].daysWorked + item[1].daysWorked,\r\n      projectID: item[0].projectID,\r\n    };\r\n  });\r\n\r\n  summarizeDaysWorked.sort(function (a, b) {\r\n    /* Sort array to get the project that was most worked on */ return (\r\n      b.daysWorkedTogether - a.daysWorkedTogether\r\n    );\r\n  });\r\n\r\n  for (let i = 0; i < summarizeDaysWorked.length + 1; i++) {\r\n    /* Leave only most worked on project employees */\r\n    summarizeDaysWorked.pop();\r\n  }\r\n\r\n  setFileResult(summarizeDaysWorked);\r\n  setIsFileUploaded(true);\r\n  JSON.stringify(summarizeDaysWorked);\r\n  console.log(\r\n    \"Employee #\" +\r\n      summarizeDaysWorked[0].employeeOne +\r\n      \" and Employee #\" +\r\n      summarizeDaysWorked[0].employeeTwo +\r\n      \" have worked on project #\" +\r\n      summarizeDaysWorked[0].projectID +\r\n      \" for the highest number of days ( \" +\r\n      summarizeDaysWorked[0].daysWorkedTogether +\r\n      \" )\"\r\n  );\r\n \r\n   \r\n   \r\n \r\n\r\n  return (\r\n    <div className=\"input-container\">\r\n      <div className=\"label-container\">\r\n        <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\r\n          Upload your file here\r\n        </label>\r\n      </div>\r\n      <input type=\"file\" id=\"fileInput\" onChange={onStartUpload} />\r\n      {isFileUploaded && <DataGrid loadedFile={fileResult}/>}\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}