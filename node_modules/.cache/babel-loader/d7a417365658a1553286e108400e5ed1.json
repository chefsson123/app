{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\task\\\\app\\\\src\\\\components\\\\Input.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport DataGrid from \"./DataGrid\";\nimport \"./Input.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [fileResult, setFileResult] = useState();\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\n\n  const sfHandler = e => {\n    console.log(fileResult);\n  }; // Callback from a <input type=\"file\" onchange=\"onChange(event)\">\n\n\n  function readFile(file) {\n    return new Promise((resolve, reject) => {\n      var fr = new FileReader();\n\n      fr.onload = () => {\n        resolve(fr.result);\n      };\n\n      fr.onerror = reject;\n      fr.readAsText(file.blob);\n    });\n  }\n  /* var file = event.target.files[0];\r\n   var reader = new FileReader();\r\n       reader.onload = function (e) {\r\n     // The file's text will be printed here\r\n     console.log(e.target.result);\r\n     const transformed = e.target.result.split(\"\\r\\n\");\r\n     const whatever = transformed.map((employee) => {\r\n       return employee.trim().split(\",\");\r\n     });\r\n         const doit = whatever.map((single) => {\r\n       return {\r\n         employeeID: single[0],\r\n         projectID: single[1],\r\n         dateFrom: single[2],\r\n         dateTo: single[3],\r\n       };\r\n       \r\n     });\r\n     setIsFileUploaded(true)\r\n     setFileResult(doit);\r\n   \r\n   };\r\n   console.log(fileResult);\r\n   reader.readAsText(file);\r\n     */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file-upload\",\n      className: \"custom-file-upload\",\n      children: \"Upload your file here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"fileInput\",\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: readFile,\n      children: \"dasdsadsa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), isFileUploaded && /*#__PURE__*/_jsxDEV(DataGrid, {\n      employeeStats: fileResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"yyEnCAUpBtrUvsLV5EW+vikkSIE=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/components/Input.js"],"names":["useState","DataGrid","Input","fileResult","setFileResult","isFileUploaded","setIsFileUploaded","sfHandler","e","console","log","readFile","file","Promise","resolve","reject","fr","FileReader","onload","result","onerror","readAsText","blob","onChange"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,aAAP;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,EAA5C;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD;;AAEA,QAAMO,SAAS,GAAIC,CAAD,IAAO;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AACD,GAFD,CAJgB,CAQhB;;;AAGI,WAASQ,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIC,EAAE,GAAG,IAAIC,UAAJ,EAAT;;AACAD,MAAAA,EAAE,CAACE,MAAH,GAAY,MAAM;AAChBJ,QAAAA,OAAO,CAACE,EAAE,CAACG,MAAJ,CAAP;AACD,OAFD;;AAGAH,MAAAA,EAAE,CAACI,OAAH,GAAaL,MAAb;AACAC,MAAAA,EAAE,CAACK,UAAH,CAAcT,IAAI,CAACU,IAAnB;AACD,KAPM,CAAP;AAQD;AACN;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKE,sBAEE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,aAAf;AAA6B,MAAA,SAAS,EAAC,oBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,WAAtB;AAAkC,MAAA,QAAQ,EAAEC;AAA5C;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAQ,MAAA,OAAO,EAAEZ,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,EAMGN,cAAc,iBAAI,QAAC,QAAD;AAAU,MAAA,aAAa,EAAEF;AAAzB;AAAA;AAAA;AAAA;AAAA,YANrB;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAWD,CA7DD;;GAAMD,K;;KAAAA,K;AA+DN,eAAeA,KAAf","sourcesContent":["import { useState } from \"react\";\r\nimport DataGrid from \"./DataGrid\";\r\nimport \"./Input.css\";\r\n\r\nconst Input = () => {\r\n    const [fileResult, setFileResult] = useState();\r\n    const [isFileUploaded, setIsFileUploaded] = useState(false)\r\n\r\n    const sfHandler = (e) => {\r\n      console.log(fileResult);\r\n    };\r\n  \r\n    // Callback from a <input type=\"file\" onchange=\"onChange(event)\">\r\n    \r\n\r\n        function readFile(file){\r\n            return new Promise((resolve, reject) => {\r\n              var fr = new FileReader();  \r\n              fr.onload = () => {\r\n                resolve(fr.result )\r\n              };\r\n              fr.onerror = reject;\r\n              fr.readAsText(file.blob);\r\n            });\r\n          }\r\n     /* var file = event.target.files[0];\r\n      var reader = new FileReader();\r\n  \r\n      reader.onload = function (e) {\r\n        // The file's text will be printed here\r\n        console.log(e.target.result);\r\n        const transformed = e.target.result.split(\"\\r\\n\");\r\n        const whatever = transformed.map((employee) => {\r\n          return employee.trim().split(\",\");\r\n        });\r\n  \r\n        const doit = whatever.map((single) => {\r\n          return {\r\n            employeeID: single[0],\r\n            projectID: single[1],\r\n            dateFrom: single[2],\r\n            dateTo: single[3],\r\n          };\r\n          \r\n        });\r\n        setIsFileUploaded(true)\r\n        setFileResult(doit);\r\n      \r\n      };\r\n      console.log(fileResult);\r\n      reader.readAsText(file);\r\n        */\r\n    \r\n\r\n  return (\r\n      \r\n    <div className=\"input-container\">\r\n      <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\r\n        Upload your file here\r\n      </label>\r\n      <input type=\"file\" id=\"fileInput\" onChange={onChange} />\r\n      <button onClick={readFile}>dasdsadsa</button>\r\n      {isFileUploaded && <DataGrid employeeStats={fileResult}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}