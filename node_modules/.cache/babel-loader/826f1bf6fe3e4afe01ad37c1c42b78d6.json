{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\task\\\\app\\\\src\\\\components\\\\Input.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport DataGrid from \"./DataGrid\";\nimport \"./Input.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [fileResult, setFileResult] = useState();\n  const [isFileUploaded, setIsFileUploaded] = useState(false);\n  const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\n  const sfHandler = e => {\n    setIsFileUploaded(true);\n    console.log(fileResult);\n  }; // Callback from a <input type=\"file\" onchange=\"onChange(event)\">\n\n\n  function onChange(event) {\n    var file = event.target.files[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      // The file's text will be printed here\n      console.log(e.target.result);\n      const transformed = e.target.result.trim().split(\"\\r\\n\");\n      const whatever = transformed.map(employee => {\n        return employee.trim().split(\",\").map(Number);\n      });\n      const doit = whatever.map(single => {\n        return {\n          employeeID: single[0],\n          projectID: single[1].trim(),\n          daysWorked: Math.round(Math.abs((new Date(single[2].trim().replaceAll(\"-\", \",\")) - new Date(single[3].trim().replaceAll(\"-\", \",\"))) / oneDay)).toString()\n        };\n      });\n      doit.sort(function (vote1, vote2) {\n        if (vote1.employeeID > vote2.employeeID) {\n          return 1;\n        } else if (vote2.employeeID > vote1.employeeID) {\n          return -1;\n        }\n      });\n      setFileResult(doit);\n    };\n\n    reader.readAsText(file);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file-upload\",\n      className: \"custom-file-upload\",\n      children: \"Upload your file here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"fileInput\",\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sfHandler,\n      children: \"dasdsadsa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), isFileUploaded && /*#__PURE__*/_jsxDEV(DataGrid, {\n      employeeStats: fileResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"yyEnCAUpBtrUvsLV5EW+vikkSIE=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/task/app/src/components/Input.js"],"names":["useState","DataGrid","Input","fileResult","setFileResult","isFileUploaded","setIsFileUploaded","oneDay","sfHandler","e","console","log","onChange","event","file","target","files","reader","FileReader","onload","result","transformed","trim","split","whatever","map","employee","Number","doit","single","employeeID","projectID","daysWorked","Math","round","abs","Date","replaceAll","toString","sort","vote1","vote2","readAsText"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport DataGrid from \"./DataGrid\";\r\nimport \"./Input.css\";\r\n\r\nconst Input = () => {\r\n    const [fileResult, setFileResult] = useState();\r\n    const [isFileUploaded, setIsFileUploaded] = useState(false)\r\n   \r\n  \r\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\r\n\r\n    \r\n   \r\n\r\n    const sfHandler = (e) => {\r\n        setIsFileUploaded(true)\r\n        console.log(fileResult);\r\n        \r\n\r\n    };\r\n  \r\n    // Callback from a <input type=\"file\" onchange=\"onChange(event)\">\r\n    function onChange(event) {\r\n      var file = event.target.files[0];\r\n      var reader = new FileReader();\r\n  \r\n      reader.onload = function (e) {\r\n        // The file's text will be printed here\r\n        console.log(e.target.result);\r\n        const transformed = e.target.result.trim().split(\"\\r\\n\");\r\n        const whatever = transformed.map((employee) => {\r\n          return employee.trim().split(\",\").map(Number);\r\n        });\r\n  \r\n        const doit = whatever.map((single) => {\r\n            \r\n            \r\n\r\n\r\n          return {\r\n            employeeID: single[0],\r\n            projectID: single[1].trim(),\r\n            daysWorked:  Math.round(Math.abs((new Date(single[2].trim().replaceAll(\"-\", \",\")) - new Date(single[3].trim().replaceAll(\"-\", \",\"))) / oneDay)).toString(),\r\n           \r\n            \r\n            \r\n            \r\n            \r\n          };\r\n          \r\n        });\r\n        \r\n        \r\n        doit.sort(function (vote1, vote2) {\r\n\r\n          \r\n          if (vote1.employeeID > vote2.employeeID) {\r\n            return 1; \r\n          }\r\n          else if (vote2.employeeID > vote1.employeeID) { \r\n            \r\n         return -1;} \r\n          \r\n         \r\n      \r\n    \r\n      \r\n      });\r\n        setFileResult(doit);\r\n      \r\n      };\r\n      \r\n      reader.readAsText(file);\r\n\r\n        \r\n    }\r\n\r\n  return (\r\n      \r\n    <div className=\"input-container\">\r\n      <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\r\n        Upload your file here\r\n      </label>\r\n      <input type=\"file\" id=\"fileInput\" onChange={onChange} />\r\n      <button onClick={sfHandler}>dasdsadsa</button>\r\n      {isFileUploaded && <DataGrid employeeStats={fileResult}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}